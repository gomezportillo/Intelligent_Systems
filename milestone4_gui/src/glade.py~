import sys, time
from main import MyApp
from auxiliary_functions import Searching_Strategies

try:
    from gi.repository import Gtk as gtk
except:
    print("GTK Not Available")
    sys.exit(1)

class GUI:
    builder = None
    window = None

    def __init__(self):
        self.builder = gtk.Builder()
        self.builder.add_from_file('src/glade.glade')
                       
        handlers = {
            "generate_path_button": self.generate_path,
            "menu_quit": self.exit,
            "menu_about": self.show_about,
        }
        
        self.builder.connect_signals(handlers)
        self.window = self.builder.get_object("main_window")
        self.window.connect('destroy', gtk.main_quit)
        self.window.show()

    def generate_path(self, button):
        init_node = self.builder.get_object('initial_tb').get_text()
        obj_nodes = self.builder.get_object('objetive_tb').get_text().split(',')

        max_lat = self.builder.get_object('max_lat_tb').get_text()
        min_lat = self.builder.get_object('min_lat_tb').get_text()
        max_lon = self.builder.get_object('max_lon_tb').get_text()
        min_lon = self.builder.get_object('min_lon_tb').get_text()

        coordinates = (min_lat, min_lon, max_lat, max_lon)

        self.myapp = MyApp(init_node, obj_nodes, coordinates)
        self.myapp.prune = self.builder.get_object('prune_switch').get_active()
        msg = self.myapp.build_hash_table()
          
        self.builder.get_object('info_lbl').set_markup('<span foreground="green">'+msg+'</span>')

        strategy = ''
        if self.builder.get_object('bfs_rb').get_active():
            strategy = Searching_Strategies.BFS

        elif self.builder.get_object('dfs_rb').get_active():
            strategy = Searching_Strategies.BFS

        elif self.builder.get_object('dls_rb').get_active():
            strategy = Searching_Strategies.BLS

        elif self.builder.get_object('ids_rb').get_active():
            strategy = Searching_Strategies.IDS

        elif self.builder.get_object('uc_rb').get_active():
            strategy = Searching_Strategies.UC

        elif self.builder.get_object('a_rb').get_active():
            strategy = Searching_Strategies.AStar
        else:
            self.builder.get_object('info_lbl').set_markup('<span foreground="red">Please select any searching strategy</span>') 
            return

        self.builder.get_object('info_lbl').set_markup('<span foreground="green">Expanding tree...</span>') 

        max_depth = self.builder.get_object('max_depth_sb').get_text()
        iter_depth = self.builder.get_object('iter_depth_sb').get_text()
        print "Searchin..."

        a = self.myapp.search_iface(strategy, max_depth, iter_depth)

        if not a :self.builder.get_object('info_lbl').set_markup('<span foreground="green">Solution wrote on data/path.gpx</span>') 
        print "Done"


    def show_about(self, button):
        self.dialog = gtk.AboutDialog()
        self.dialog.set_name("OSM path finder")
        self.dialog.set_authors(['\nPedro-Manuel Gomez-Portillo Lopez', 'Juan Garrido Arcos'])
        self.dialog.set_license(open('LICENSE.txt', 'r').read())
        self.dialog.run()
        self.dialog.destroy()

    def exit(self, button):
        sys.exit(1)

    
gui = GUI()
gtk.main()


